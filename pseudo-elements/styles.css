* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: "Roboto Flex", sans-serif;
}

body {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background: #23242a;
}

.home-link {
  position: absolute;
  top: 20px;
  left: calc(50%-31px);
  color: #fff;
  font-size: 1.5em;
  width: 62px;
}

/* Challenge:

Before Progress: Using the ::before pseudo-element on the .progress-bar class, create a thin line 
that represents the entire progress bar (100%). You can use a light grey color for this element.

After Progress: Next, use the ::after pseudo-element on the .progress-bar class to create a colored section that
 represents the actual progress (initially set to 0%). This element can be a brighter color.

Dynamic Progress: Implement JavaScript code to update the width of the ::after pseudo-element based on a progress value
 (between 0 and 100%). You can use a button or slider element to control the progress value.

Understanding Pseudo-Elements in Action:

As you complete this exercise, you'll gain a deeper understanding of how pseudo-elements work:

::before and ::after: These pseudo-elements allow you to insert content before or after the content of an element, respectively.
 In this case, you'll use them to create the visual components of the progress bar without adding extra HTML elements.
Styling Pseudo-Elements: You can apply CSS styles like background-color, width, height, and more to customize the appearance
 of the pseudo-elements.
Dynamic Content: By controlling the width of the ::after element with JavaScript, you'll simulate the progress bar filling up.
Bonus Challenge:

Animate the progress bar filling using CSS transitions on the width property of the ::after pseudo-element.
Tips:

Start with basic styles for the progress bar container and the pseudo-elements.
Use developer tools in your browser to inspect the elements and styles as you work.
Search online for resources on CSS pseudo-elements and transitions for further guidance.
By completing this exercise, you'll gain a solid understanding of how pseudo-elements can be used to create interactive
and visually appealing UI components without relying on additional HTML elements. */

.progress-bar {
  position: relative;
  width: 30rem;
  height: 30px;
  border-radius: 8px;
}

.progress-bar::before {
  /* Styles for the before appears on the front */
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: #8f8f8f;
  border-radius: 8px;
}

.progress-bar::after {
  /* Styles for the after appears on the back */
  content: "";
  position: absolute; /* Overlap the "before" element */
  top: 0;
  left: 0;
  width: 0%;
  height: 100%;
  background-color: #80d480;
  transition: width 0.5s ease;
  border-radius: 8px;
  animation: load 10s ease-in forwards;
  animation-delay: -1s;
}

@keyframes load {
  0% {
    width: 0%;
  }

  60% {
    width: 20%;
  }

  90% {
    width: 22%;
  }

  100% {
    width: 100%;
  }
}
